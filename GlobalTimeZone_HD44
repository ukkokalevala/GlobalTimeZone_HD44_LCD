#include <LiquidCrystal.h>
#include <ESP8266WiFi.h>
#include <WiFiUdp.h>  // Send data to UDP host over a wireless network 
#include <NTPClient.h> // for connecting to a time server and keep it synchronized 

// Initialize the LCD
LiquidCrystal lcd(D4, D3, D2, D1, D0, D5);

// WiFi setup
const char* ssid = "yourSSID";
const char* password = "yourPASSWORD";

// Time Zones (in seconds)
const int TIME_ZONES[] = {2 * 3600, 0, -5 * 3600, -8 * 3600, 1 * 3600, 9 * 3600};
const char* LOCATIONS[] = {"Cape Town", "London", "New York", "Los Angeles", "Milan", "Tokyo"};

WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 0); // UTC Time from NTP server

// Touch Button
#define TOUCH_BUTTON D6

int currentCity = 0; // Default: Cape Town
bool buttonState = false;  // To detect button press

void setup() {
  // Initialize Serial
  Serial.begin(115200);

  // Initialize LCD
  lcd.begin(16, 2); // 16x2 LCD
  lcd.print("Initializing...");

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("Connected to WiFi");

  timeClient.begin();

  // Configure touch button as input
  pinMode(TOUCH_BUTTON, INPUT);

  lcd.clear();
  lcd.print("Clock Ready");
  delay(2000);
}

void loop() {
  timeClient.update();

  // Check if the touch button is pressed (LOW for touch sensors)
  bool currentButtonState = digitalRead(TOUCH_BUTTON) == LOW;

  // If the button is pressed, but it was not pressed before, flip the city
  if (currentButtonState && !buttonState) {
    currentCity = (currentCity + 1) % 6;
    buttonState = true; // Set button state to pressed
    delay(300);  // Debounce delay to avoid multiple triggers
  }

  // If the button is not pressed, reset the button state
  if (!currentButtonState) {
    buttonState = false;  // Reset button state to not pressed
  }

  // Calculate Local Time
  long utcTime = timeClient.getEpochTime();
  long localTime = utcTime + TIME_ZONES[currentCity];

  // Display Time and Location
  displayTime(localTime, LOCATIONS[currentCity]);
}

void displayTime(long timeStamp, const char* location) {
  static String lastTime = ""; // Store the last displayed time to reduce updates

  // Calculate time components
  int hours = (timeStamp % 86400L) / 3600;  // Hours
  int minutes = (timeStamp % 3600) / 60;    // Minutes
  int seconds = timeStamp % 60;             // Seconds

  // Format time as a string
  String currentTime = (hours < 10 ? "0" : "") + String(hours) + ":" +
                       (minutes < 10 ? "0" : "") + String(minutes) + ":" +
                       (seconds < 10 ? "0" : "") + String(seconds);

  // Update location on the first line
  lcd.setCursor(0, 0);
  lcd.print(location);
  for (int i = strlen(location); i < 16; i++) lcd.print(" "); // Clear trailing characters

  // Update time on the second line only if it changes
  if (currentTime != lastTime) {
    lcd.setCursor(0, 1);
    lcd.print(currentTime);
    for (int i = currentTime.length(); i < 16; i++) lcd.print(" "); // Clear trailing characters
    lastTime = currentTime;
  }
}
